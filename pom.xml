<!--
  This POM is used for components that need to be installed.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <parent>
    <artifactId>ingrid-base-pom</artifactId>
    <groupId>de.ingrid</groupId>
    <version>7.0.0</version>
  </parent>
  <modelVersion>4.0.0</modelVersion>
  <artifactId>ingrid-releases-pom</artifactId>
  <packaging>pom</packaging>
  <version>7.0.0-SNAPSHOT</version>
  <name>InGrid POM Release</name>

  <!-- ==================== Source Code Management ==================== -->
  <scm>
    <connection>scm:git:git@github.com:informationgrid/ingrid-releases-pom.git</connection>
    <developerConnection>scm:git:git@github.com:informationgrid/ingrid-releases-pom.git</developerConnection>
    <tag>HEAD</tag>
  </scm>

  <!-- ==================== PROPERTIES ==================== -->
  <properties>
    <docker-plugin.version>1.2.2</docker-plugin.version>
    <iplug.type>OTHER</iplug.type>
  </properties>

  <!-- ==================== DEPENDENCIES ==================== -->
  <dependencies>
    <dependency>
      <groupId>de.ingrid</groupId>
      <artifactId>ingrid-installer</artifactId>
      <version>7.0.0</version>
      <scope>provided</scope>
      <optional>true</optional>
    </dependency>
  </dependencies>

  <!-- NEVER DELETE: InGrid repo needed for download of base pom if not present ! -->
  <!-- ==================== REPOSITORIES ==================== -->
  <repositories>
    <repository>
      <id>nexus</id>
      <name>Nexus Repo</name>
      <url>https://nexus.informationgrid.eu/repository/maven-public</url>
    </repository>
  </repositories>

  <!-- ==================== Build Configuration ==================== -->
  <build>
    <!--
      The following plugins are templates and can be easily activate by just defining them in the child pom.
    -->
    <pluginManagement>
      <plugins>

        <!--
          Ths plugin build a docker image from the created installer and pushes it to the wemove docker registry.
          The dockerfile has to be present in 'src/docker'.
        -->
        <plugin>
          <groupId>com.spotify</groupId>
          <artifactId>docker-maven-plugin</artifactId>
          <version>${docker-plugin.version}</version>
          <configuration>
            <imageName>docker-registry.wemove.com/${project.artifactId}:${project.version}</imageName>
            <dockerDirectory>src/docker</dockerDirectory>
            <!-- user configured server in mavens settings.xml -->
            <serverId>docker-wemove</serverId>
            <resources>
              <resource>
                <targetPath>/</targetPath>
                <directory>${project.build.directory}</directory>
                <include>${project.build.finalName}-installer.jar</include>
              </resource>
            </resources>
          </configuration>
          <executions>
            <execution>
              <id>build-image</id>
              <phase>package</phase>
              <goals>
                <goal>build</goal>
              </goals>
            </execution>
            <execution>
              <id>push-image</id>
              <phase>deploy</phase>
              <goals>
                <goal>push</goal>
              </goals>
            </execution>
          </executions>
        </plugin>

        <!--
          Assembly a project and create an installer which is defined in bin.xml.
          Moreover add extra information to the Manifest.
        -->
        <plugin>
          <artifactId>maven-assembly-plugin</artifactId>
          <version>3.4.2</version>
          <configuration>
            <appendAssemblyId>true</appendAssemblyId>
            <archive>
              <manifest>
                <mainClass>org.tp23.antinstaller.selfextract.NonExtractor</mainClass>
              </manifest>
              <manifestEntries>
                <Implementation-Version>${project.version}</Implementation-Version>
                <Implementation-Build>${buildNumber}</Implementation-Build>
                <Build-Timestamp>${timestamp}</Build-Timestamp>
                <!--suppress UnresolvedMavenProperty -->
                <Hudson-Build-Number>${BUILD_NUMBER}</Hudson-Build-Number>
                <!--suppress UnresolvedMavenProperty -->
                <Hudson-Project>${JOB_NAME}</Hudson-Project>
                <ingridComponentType>${iplug.type}</ingridComponentType>
              </manifestEntries>
            </archive>
            <descriptors>
              <descriptor>src/main/assembly/bin.xml</descriptor>
            </descriptors>
          </configuration>
          <executions>
            <execution>
              <id>make-installer</id>
              <phase>package</phase>
              <goals>
                <goal>single</goal>
              </goals>
            </execution>
          </executions>
        </plugin>
      </plugins>
    </pluginManagement>

    <!--
      The following plugins will be added automatically to the child pom.
    -->
    <plugins>

      <!--
        This plugin unpacks the installer which will be used by the assembly plugin to create the installer.
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>unpack-installer</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>unpack</goal>
            </goals>
            <configuration>
              <artifactItems>
                <artifactItem>
                  <groupId>de.ingrid</groupId>
                  <artifactId>ingrid-installer</artifactId>
                  <type>jar</type>
                </artifactItem>
              </artifactItems>
              <!-- other configurations here -->
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!--
        This plugin prepares the installer by copying needed libraries and resources.
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <version>3.1.0</version>
        <executions>
          <execution>
            <id>prepare-installer</id>
            <phase>prepare-package</phase>
            <configuration>
              <target>
                <unjar dest="target/installer">
                  <fileset dir="target/dependency/lib">
                    <include name="**/*.jar" />
                  </fileset>
                </unjar>
                <copy todir="target/installer/resources">
                  <fileset dir="target/dependency/resources" />
                </copy>
                <copy todir="target/installer">
                  <fileset dir="target/dependency/utils" />
                </copy>
              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!--
        This plugin configures the git-flow for this project
      -->
      <plugin>
        <groupId>external.atlassian.jgitflow</groupId>
        <artifactId>jgitflow-maven-plugin</artifactId>
        <version>1.0-m5.1</version>
        <configuration>
          <defaultOriginUrl>https://github.com/informationgrid/ingrid-releases-pom</defaultOriginUrl>
          <noDeploy>true</noDeploy>
        </configuration>
      </plugin>

      <!--
        DEPRECATED: This plugin adds a Manifest entry to a JAR file. The value is used by the Updater project
        which is no longer used.
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <configuration>
          <archive>
            <manifestEntries>
              <!-- see ingrid-utils:de.ingrid.utils.metadata.IPlugType-->
              <iPlug-Type>${iplug.type}</iPlug-Type>
            </manifestEntries>
          </archive>
        </configuration>
      </plugin>
    </plugins>
  </build>

  <issueManagement>
    <system>Redmine</system>
    <url>https://redmine.informationgrid.eu/</url>
  </issueManagement>

  <!--
    The following profiles define additional behaviors and can be manually activated or some even automatically.
  -->
  <profiles>

    <!--
      Activate docker execution
    -->
    <profile>
      <id>docker</id>
      <build>
        <plugins>
          <!-- make sure assembly plugin is executed in the right order-->
          <plugin>
            <artifactId>maven-assembly-plugin</artifactId>
          </plugin>

          <plugin>
            <groupId>com.spotify</groupId>
            <artifactId>docker-maven-plugin</artifactId>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!-- 
        Push docker image when on branch develop (usage: -P $(git rev-parse \-\-abbrev-ref HEAD))
        Also set latest tag to the created docker image. So every build on develop will get the
        latest-tag.
    -->
    <profile>
      <id>docker-develop</id>
      <build>
        <plugins>
          <plugin>
            <groupId>com.spotify</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <configuration>
              <pushImageTag>true</pushImageTag>
              <imageTags>
                <!-- add an additional tag with the build version -->
                <imageTag>latest</imageTag>
              </imageTags>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!--
      This profile allows SNAPSHOT versions and overrides release-profile (below)
    -->
    <profile>
      <id>requireSnapshotVersion</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-enforcer-plugin</artifactId>
            <version>3.0.0</version>
            <executions>
              <execution>
                <id>enforce-no-releases</id>
                <goals>
                  <goal>enforce</goal>
                </goals>
                <configuration>
                  <rules>
                    <requireSnapshotVersion>
                      <message>No Releases Allowed!</message>
                      <failWhenParentIsRelease>false</failWhenParentIsRelease>
                    </requireSnapshotVersion>
                  </rules>
                  <fail>true</fail>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!--
      When performing a release the no SNAPSHOTS are allowed, the licence header has to be applied to all
      files and the changes.xml must be valid for the release version.
      Moreover the release installer will be copied to the distribution directory.
    -->
    <profile>
      <id>release</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-enforcer-plugin</artifactId>
            <version>3.0.0</version>
            <executions>
              <execution>
                <id>enforce-no-snapshots</id>
                <goals>
                  <goal>enforce</goal>
                </goals>
                <configuration>
                  <rules>
                    <requireReleaseVersion>
                      <message>No Snapshots Allowed!</message>
                    </requireReleaseVersion>
                    <requireReleaseDeps>
                      <message>No Snapshot-Dependencies Allowed!</message>
                    </requireReleaseDeps>
                  </rules>
                  <fail>true</fail>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>license-maven-plugin</artifactId>
            <configuration>
              <failOnMissingHeader>true</failOnMissingHeader>
              <failOnNotUptodateHeader>true</failOnNotUptodateHeader>
            </configuration>
          </plugin>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>wagon-maven-plugin</artifactId>
            <configuration>
              <fromDir>target</fromDir>
              <includes>${project.build.finalName}-installer.jar,site*/**/*</includes>
              <url>file:///opt/ingrid/distributions/${project.artifactId}/${project.version}</url>
            </configuration>
            <executions>
              <execution>
                <id>upload-to-distributions</id>
                <phase>deploy</phase>
                <goals>
                  <goal>upload</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!--
      This profile is activated automatically if you use the base-webapp in your project. This will unpack the
      webapp into the target directory for further usage.
    -->
    <profile>
      <id>base-webapp</id>
      <activation>
        <file>
          <exists>src/main/webapp/WEB-INF/jsp/iplug-pages/iplugSubNavi.jsp</exists>
        </file>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-dependency-plugin</artifactId>
            <executions>
              <execution>
                <id>unpack-base-webapp</id>
                <phase>compile</phase>
                <goals>
                  <goal>unpack</goal>
                </goals>
                <configuration>
                  <artifactItems>
                    <artifactItem>
                      <groupId>de.ingrid</groupId>
                      <artifactId>ingrid-base-webapp</artifactId>
                      <classifier>res</classifier>
                      <type>zip</type>
                      <outputDirectory>${project.build.directory}/base-webapp</outputDirectory>
                    </artifactItem>
                  </artifactItems>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!-- 
      Activate the development-profile when using in Eclipse/IDEA
      This will use the develop-resources for startup, which is helpful
      during development.
    -->
    <profile>
      <id>development</id>
      <build>
        <resources>
          <resource>
            <directory>src/develop/resources</directory>
          </resource>
          <resource>
            <directory>src/main/resources</directory>
          </resource>
        </resources>
      </build>
    </profile>
  </profiles>
</project>
